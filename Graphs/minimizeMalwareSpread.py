from collections import defaultdict
import math


def minimizeMalwareSpread(graph, initial):
    """
    In a network of nodes, each node i is directly connected to another node j 
    if and only if graph[i][j] = 1.

    Some nodes initial are initially infected by malware.  Whenever two nodes are 
    directly connected and at least one of those two nodes is infected by malware, 
    both nodes will be infected by malware.  This spread of malware will continue 
    until no more nodes can be infected in this manner.

    Suppose M(initial) is the final number of nodes infected with malware in the 
    entire network, after the spread of malware stops.

    We will remove one node from the initial list.  Return the node that if removed, 
    would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), 
    return such a node with the smallest index.

    Note that if a node was removed from the initial list of infected nodes, it 
    may still be infected later as a result of the malware spread.

    Note that the graph representation is an adjacency matrix.
    Idea: DFS.
     - First, do a DFS from every node. Reach as many nodes as possible, and label
     them with the same id. All nodes with the same id form a connected component
     - Now, every connected component has to a certain number of nodes. The idea
     is that if we can remove a malware infected node from the largest component,
     we will minimize the number of nodes that will get infected
     - HOWEVER: technically, if two nodes in 'initial' belong to the same component,
     removing one node will have no effect since the other node can infect the rest
     of the nodes in that component. So we need to find the nodes in `initial` such
     that those are nodes have a unique `id`
    """

    seen = set()
    ids = {}
    id = 0

    # label all nodes with an ID
    def dfs(node, id):
        seen.add(node)
        ids[node] = id
        for neighbor, value in enumerate(graph[node]):
            if neighbor not in seen and value:
                dfs(neighbor, id)

    for node in range(len(graph)):
        if node not in seen:
            dfs(node, id)
            id += 1

    # get the size of each id-labelled component
    sizes = defaultdict(int)

    for node in range(len(graph)):
        sizes[ids[node]] += 1

    # get the frequencies of the components in `initial`
    freq = defaultdict(int)
    for node in initial:
        freq[ids[node]] += 1

    # get minimum answer
    ans = -1
    for node in initial:
        if freq[ids[node]] == 1:
            if ans == -1:
                ans = node
            elif sizes[ids[node]] > sizes[ids[ans]]:
                ans = node
            elif sizes[ids[node]] == sizes[ids[ans]] and node < ans:
                ans = node

    return ans if ans != -1 else min(initial)
